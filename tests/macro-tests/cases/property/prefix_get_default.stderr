error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
  --> cases/property/prefix_get_default.rs:10:58
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                          ^^^^^^^^^^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`, which is required by `NotDefault: VarValue`
   |
   = note: `VarValue` is implemented for all `T: Debug + Clone + PartialEq + Any + Send + Sync`
   = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `IntoVar`
  --> $WORKSPACE/crates/zng-var/src/lib.rs
   |
   | pub trait IntoVar<T: VarValue> {
   |                      ^^^^^^^^ required by this bound in `IntoVar`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16  + #[derive(PartialEq)]
17  | pub struct NotDefault {}
    |

error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
  --> cases/property/prefix_get_default.rs:10:66
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                                  ^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`, which is required by `NotDefault: VarValue`
   |
   = note: `VarValue` is implemented for all `T: Debug + Clone + PartialEq + Any + Send + Sync`
   = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `WhenInputVar::new`
  --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
   |
   |     pub fn new<T: VarValue>() -> (Self, impl Var<T>) {
   |                   ^^^^^^^^ required by this bound in `WhenInputVar::new`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |

error[E0277]: can't compare `NotDefault` with `NotDefault`
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
  |
  = help: the trait `PartialEq` is not implemented for `NotDefault`, which is required by `NotDefault: VarValue`
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `WhenInputVar::new`
 --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
  |
  |     pub fn new<T: VarValue>() -> (Self, impl Var<T>) {
  |                   ^^^^^^^^ required by this bound in `WhenInputVar::new`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |

error[E0277]: can't compare `NotDefault` with `NotDefault`
  --> cases/property/prefix_get_default.rs:10:53
   |
9  | #[property(CONTEXT)]
   | -------------------- required by a bound introduced by this call
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                     ^^^^ no implementation for `NotDefault == NotDefault`
   |
   = help: the trait `PartialEq` is not implemented for `NotDefault`, which is required by `ArcVar<_>: IntoVar<NotDefault>`
   = help: the trait `IntoVar<T>` is implemented for `ArcVar<T>`
   = note: required for `NotDefault` to implement `VarValue`
   = note: required for `ArcVar<NotDefault>` to implement `IntoVar<NotDefault>`
note: required by a bound in `get_state_invalid_::args`
  --> cases/property/prefix_get_default.rs:10:58
   |
9  | #[property(CONTEXT)]
   | -------------------- required by a bound in this associated function
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `get_state_invalid_::args`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: the trait bound `NotDefault: std::default::Default` is not satisfied
  --> cases/property/prefix_get_default.rs:10:53
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                     ^^^^ the trait `std::default::Default` is not implemented for `NotDefault`
   |
note: required by a bound in `getter_var`
  --> $WORKSPACE/crates/zng-var/src/arc.rs
   |
   | pub fn getter_var<T: VarValue + Default>() -> ArcVar<T> {
   |                                 ^^^^^^^ required by this bound in `getter_var`
help: consider annotating `NotDefault` with `#[derive(Default)]`
   |
16  + #[derive(Default)]
17  | pub struct NotDefault {}
    |

error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`, which is required by `NotDefault: VarValue`
  |
  = note: `VarValue` is implemented for all `T: Debug + Clone + PartialEq + Any + Send + Sync`
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `new_dyn_var`
 --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
  |
  | pub fn new_dyn_var<'a, T: VarValue>(
  |                           ^^^^^^^^ required by this bound in `new_dyn_var`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |

error[E0277]: the trait bound `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>: Clone` is not satisfied
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>`
  |
  = help: the following other types implement trait `Clone`:
            <implementers-list>
  = note: this error originates in the derive macro `std::clone::Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>: Clone` is not satisfied
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>`
  |
  = help: the following other types implement trait `Clone`:
            <implementers-list>
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `NotDefault` with `NotDefault`
  --> cases/property/prefix_get_default.rs:9:1
   |
9  | #[property(CONTEXT)]
   | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |        ----------------- required by a bound introduced by this call
   |
   = help: the trait `PartialEq` is not implemented for `NotDefault`, which is required by `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>: IntoVar<NotDefault>`
   = help: the trait `IntoVar<T>` is implemented for `Box<dyn zng_var::boxed::VarBoxed<T>>`
   = note: required for `NotDefault` to implement `VarValue`
   = note: required for `Box<dyn zng_var::boxed::VarBoxed<NotDefault>>` to implement `IntoVar<NotDefault>`
note: required by a bound in `get_state_invalid`
  --> cases/property/prefix_get_default.rs:10:58
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `get_state_invalid`
   = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
  |
  = help: the trait `PartialEq` is not implemented for `NotDefault`, which is required by `Box<(dyn zng_var::boxed::VarBoxed<NotDefault> + 'static)>: AnyVar`
  = help: the following other types implement trait `AnyVar`:
            <implementers-list>
  = note: required for `Box<(dyn zng_var::boxed::VarBoxed<NotDefault> + 'static)>` to implement `AnyVar`
  = note: required for the cast from `&Box<(dyn zng_var::boxed::VarBoxed<NotDefault> + 'static)>` to `&(dyn AnyVar + 'static)`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16+ #[derive(PartialEq)]
17| pub struct NotDefault {}
  |

error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`, which is required by `NotDefault: VarValue`
  |
  = note: `VarValue` is implemented for all `T: Debug + Clone + PartialEq + Any + Send + Sync`
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `var_to_args`
 --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
  |
  | pub fn var_to_args<T: VarValue>(var: impl IntoVar<T>) -> BoxedVar<T> {
  |                       ^^^^^^^^ required by this bound in `var_to_args`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |
