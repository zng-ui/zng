error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
  --> cases/property/prefix_get_default.rs:10:58
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                          ^^^^^^^^^^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`
   |
   = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `IntoVar`
  --> $WORKSPACE/crates/zng-var/src/var_impl/const_var.rs
   |
   | pub trait IntoVar<T: VarValue> {
   |                      ^^^^^^^^ required by this bound in `IntoVar`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
  |
  = help: the trait `PartialEq` is not implemented for `NotDefault`
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `zng::var::Var`
 --> $WORKSPACE/crates/zng-var/src/var.rs
  |
  | pub struct Var<T: VarValue> {
  |                   ^^^^^^^^ required by this bound in `Var`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
  --> cases/property/prefix_get_default.rs:10:53
   |
9  | #[property(CONTEXT)]
   | -------------------- required by a bound introduced by this call
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                     ^^^^ no implementation for `NotDefault == NotDefault`
   |
   = help: the trait `PartialEq` is not implemented for `NotDefault`
   = help: the following other types implement trait `IntoVar<T>`:
            <implementers-list>
   = note: required for `zng::var::Var<NotDefault>` to implement `IntoVar<NotDefault>`
note: required by a bound in `get_state_invalid_::args`
  --> cases/property/prefix_get_default.rs:10:58
   |
9  | #[property(CONTEXT)]
   | -------------------- required by a bound in this associated function
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `get_state_invalid_::args`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: the trait bound `NotDefault: std::default::Default` is not satisfied
  --> cases/property/prefix_get_default.rs:10:53
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                     ^^^^ the trait `std::default::Default` is not implemented for `NotDefault`
   |
note: required by a bound in `var_getter`
  --> $WORKSPACE/crates/zng-var/src/var_impl/shared_var.rs
   |
   | pub fn var_getter<T: VarValue + Default>() -> Var<T> {
   |                                 ^^^^^^^ required by this bound in `var_getter`
help: consider annotating `NotDefault` with `#[derive(Default)]`
   |
16 + #[derive(Default)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
  --> cases/property/prefix_get_default.rs:10:46
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                              ^^^^^ no implementation for `NotDefault == NotDefault`
   |
   = help: the trait `PartialEq` is not implemented for `NotDefault`
   = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `zng::var::Var`
  --> $WORKSPACE/crates/zng-var/src/var.rs
   |
   | pub struct Var<T: VarValue> {
   |                   ^^^^^^^^ required by this bound in `Var`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
  |
  = help: the trait `PartialEq` is not implemented for `NotDefault`
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `zng::var::Var`
 --> $WORKSPACE/crates/zng-var/src/var.rs
  |
  | pub struct Var<T: VarValue> {
  |                   ^^^^^^^^ required by this bound in `Var`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16 + #[derive(PartialEq)]
17 | pub struct NotDefault {}
   |

error[E0277]: can't compare `NotDefault` with `NotDefault`
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ no implementation for `NotDefault == NotDefault`
  |
  = help: the trait `PartialEq` is not implemented for `NotDefault`
  = note: required for `NotDefault` to implement `VarValue`
  = note: required for `zng::var::Var<NotDefault>` to implement `Clone`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16+ #[derive(PartialEq)]
17| pub struct NotDefault {}
  |

error[E0308]: mismatched types
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^
  | |
  | expected `&AnyVar`, found `&Var<NotDefault>`
  | expected `&AnyVar` because of return type
  |
  = note: expected reference `&AnyVar`
             found reference `&zng::var::Var<NotDefault>`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
 --> cases/property/prefix_get_default.rs:9:1
  |
9 | #[property(CONTEXT)]
  | ^^^^^^^^^^^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`
  |
  = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `var_to_args`
 --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
  |
  | pub fn var_to_args<T: VarValue>(var: impl IntoVar<T>) -> Var<T> {
  |                       ^^^^^^^^ required by this bound in `var_to_args`
  = note: this error originates in the attribute macro `property` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
  |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |

error[E0277]: the trait bound `NotDefault: VarValue` is not satisfied
  --> cases/property/prefix_get_default.rs:10:66
   |
10 | pub fn get_state_invalid(child: impl UiNode, state: impl IntoVar<NotDefault>) -> impl UiNode {
   |                                                                  ^^^^^^^^^^ the trait `PartialEq` is not implemented for `NotDefault`
   |
   = note: required for `NotDefault` to implement `VarValue`
note: required by a bound in `WhenInputVar::new`
  --> $WORKSPACE/crates/zng-app/src/widget/builder.rs
   |
   |     pub fn new<T: VarValue>() -> (Self, Var<T>) {
   |                   ^^^^^^^^ required by this bound in `WhenInputVar::new`
help: consider annotating `NotDefault` with `#[derive(PartialEq)]`
   |
16   + #[derive(PartialEq)]
17   | pub struct NotDefault {}
     |
