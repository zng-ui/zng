[package]
name = "zng"
version = "0.12.6"
authors = ["The Zng Project Developers"]
edition = "2021"
license = "Apache-2.0 OR MIT"
readme = "README.md"
description = "Cross-platform GUI framework."
documentation = "https://zng-ui.github.io/doc/zng"
repository = "https://github.com/zng-ui/zng"
categories = ["gui"]
keywords = ["gui", "ui", "user-interface", "zng"]

[features]
default = ["ipc", "debug_default", "view_software", "crash_handler"]

# Include the default view-process implementation.
#
# Only enables in `not(target_arch = "wasm32")` builds.
view = ["dep:zng-view"]
# Include the default view-process implementation as an embedded precompiled binary.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
view_prebuilt = ["dep:zng-view-prebuilt", "ipc"]

# Enables HTTP tasks and web features of widgets and services.
http = [
    "zng-task/http",
    "zng-wgt/http",
    "zng-ext-image/http",
    "zng-ext-window/http",
]

# Enable the `"dyn_*"`, `"inspector"` features in debug builds.
debug_default = [
    "zng-app/debug_default",
    "zng-wgt-inspector/debug_default",
    "zng-wgt-scroll/debug_default",
    "zng-wgt-window/debug_default",
]

# Enable SVG images, emoji support.
svg = ["zng-ext-svg", "zng-ext-font/svg"]

# Use more dynamic dispatch at the node level by enabling `UiNode::cfg_boxed` to box.
#
# This speeds-up compilation time at the cost of runtime.
dyn_node = ["zng-app/dyn_node"]

# Instrument each property and widget instance with "Inspector" nodes and
# extend windows to be inspected on Ctrl+Shift+I.
inspector = ["zng-app/inspector", "zng-wgt-inspector/live"]

# Enable hot reload builds.
#
# Note that you must configure the target library to hot reload, see `zng::hot_reload` for details.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
hot_reload = ["dep:zng-ext-hot-reload"]

# Use dynamic dispatch at the app-extension level.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = ["zng-app/dyn_app_extension"]

# Box closures at opportune places, such as `Var::map`, reducing the number of monomorphised types.
#
# This speeds-up compilation time at the cost of runtime.
dyn_closure = [
    "zng-wgt/dyn_closure",
    "zng-wgt-scroll/dyn_closure",
    "zng-wgt-window/dyn_closure",
]

# Test utilities.
test_util = [
    "zng-app/test_util",
    "zng-ext-window/test_util",
    "zng-task/test_util",
]

# Allows multiple app instances per-process.
#
# This feature allows multiple apps, one app per thread at a time. The `LocalContext` tracks
# what app is currently running in each thread and `app_local!` statics switch to the value of each app
# depending on the current thread.
#
# Not enabled by default, but enabled by `feature="test_util"`.
multi_app = ["zng-app/multi_app"]

# Enables single app-process instance mode.
#
# Builds with this feature only allow one app-process, subsequent attempts to spawn the app redirect to
# the running app-process.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
single_instance = ["dep:zng-ext-single-instance"]

# Allow app-process crash handler.
#
# Builds with this feature spawn a crash monitor-process for each app-process.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android"))` builds.
crash_handler = ["zng-app/crash_handler", "zng-wgt-inspector/crash_handler"]

# Instrument every widget outer-most node to trace UI methods.
trace_widget = ["zng-app/trace_widget", "zng-wgt-style/trace_widget"]

# Instrument every property and intrinsic node to trace UI methods.
#
# Note that this can cause very large trace files and bad performance.
trace_wgt_item = ["zng-app/trace_wgt_item"]

# Spawns a thread on app creation that checks and prints `parking_lot` deadlocks.
deadlock_detection = ["zng-app/deadlock_detection"]

# Embed hyphenation dictionaries for all supported languages.
#
# If enabled some 2.8MB of data is embedded, you can provide an alternative dictionary source using the 
# `HYPHENATION::init_data_source` method.
hyphenation_embed_all = ["zng-ext-font/hyphenation_embed_all"]

# Include all Material Icons icon sets in the default app.
material_icons = [
    "material_icons_outlined",
    "material_icons_filled",
    "material_icons_rounded",
    "material_icons_sharp",
]
# Material Icons Outlined icon set.
#
# If enabled some icons of this set are used for some of the commands.
material_icons_outlined = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/outlined",
]

# Material Icons Filled icon set.
material_icons_filled = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/filled",
]

# Material Icons Rounded icon set.
material_icons_rounded = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/rounded",
]

# Material Icons Sharp icon set.
material_icons_sharp = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/sharp",
]

# Enable TOML configs.
toml = ["zng-ext-config/toml"]
# Enable RON configs.
ron = ["zng-ext-config/ron"]
# Enable YAML configs.
yaml = ["zng-ext-config/yaml"]

# Enables software renderer fallback in the default view-process.
#
# If enabled and a native OpenGL 3.2 driver is not available the `swgl` software renderer is used.
view_software = ["zng-view?/software"]
# Collects and bundles third-party licenses used by the `zng-view` crate.
#
# Needs `cargo-about` and Internet connection during build.
#
# Not enabled by default. Note that `"view_prebuilt"` always bundles licenses.
view_bundle_licenses = ["zng-view?/bundle_licenses"]

# Enables IPC tasks, pre-build views and connecting to views running in another process.
#
# Only enables in `not(any(target_os = "android", target_arch = "wasm32", target_os = "ios"))` builds.
ipc = ["zng-app/ipc", "zng-view-api/ipc", "zng-view?/ipc", "zng-task/ipc"]

# Check if `zng::env::res` path is available in `init_built_res` first.
#
# Enabled by default in debug builds, ignored in Android and Wasm.
built_res = ["zng-env/built_res"]

# Standard Android backend that requires a build system that can compile Java or Kotlin and fetch Android dependencies.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details.
android_game_activity = ["zng-view?/android_game_activity"]

# Basic Android backend that does not require Java.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details. 
android_native_activity = ["zng-view?/android_native_activity"]

[dependencies]
# foundation
zng-clone-move = { path = "../zng-clone-move", version = "0.2.5" }
zng-txt = { path = "../zng-txt", version = "0.2.8" }
zng-state-map = { path = "../zng-state-map", version = "0.3.7" }
zng-app-context = { path = "../zng-app-context", version = "0.5.12" }
zng-layout = { path = "../zng-layout", version = "0.2.30" }
zng-var = { path = "../zng-var", version = "0.5.9" }
zng-task = { path = "../zng-task", version = "0.4.9" }
zng-color = { path = "../zng-color", version = "0.3.15" }
zng-env = { path = "../zng-env", version = "0.3.7" }
zng-unique-id = { path = "../zng-unique-id", version = "0.4.7" }

# app
zng-app = { path = "../zng-app", version = "0.13.4", default-features = false }
zng-ext-fs-watcher = { path = "../zng-ext-fs-watcher", version = "0.2.37" }
zng-ext-config = { path = "../zng-ext-config", version = "0.3.17", default-features = false }
zng-ext-font = { path = "../zng-ext-font", version = "0.4.12" }
zng-ext-l10n = { path = "../zng-ext-l10n", version = "0.5.17" }
zng-ext-image = { path = "../zng-ext-image", version = "0.2.38" }
zng-ext-svg = { path = "../zng-ext-svg", version = "0.1.4", optional = true }
zng-ext-clipboard = { path = "../zng-ext-clipboard", version = "0.2.39" }
zng-ext-window = { path = "../zng-ext-window", version = "0.3.29" }
zng-ext-input = { path = "../zng-ext-input", version = "0.5.28" }
zng-ext-undo = { path = "../zng-ext-undo", version = "0.2.40" }
zng-ext-hot-reload = { path = "../zng-ext-hot-reload", version = "0.1.26", optional = true }

# widgets
zng-wgt = { path = "../zng-wgt", version = "0.5.4" }
zng-wgt-access = { path = "../zng-wgt-access", version = "0.2.38" }
zng-wgt-transform = { path = "../zng-wgt-transform", version = "0.2.38" }
zng-wgt-input = { path = "../zng-wgt-input", version = "0.2.40" }
zng-wgt-data = { path = "../zng-wgt-data", version = "0.2.38" }
zng-wgt-filter = { path = "../zng-wgt-filter", version = "0.2.38" }
zng-wgt-size-offset = { path = "../zng-wgt-size-offset", version = "0.2.38" }
zng-wgt-container = { path = "../zng-wgt-container", version = "0.4.0" }
zng-wgt-undo = { path = "../zng-wgt-undo", version = "0.2.40" }
zng-wgt-data-view = { path = "../zng-wgt-data-view", version = "0.3.28" }
zng-wgt-fill = { path = "../zng-wgt-fill", version = "0.2.38" }
zng-wgt-style = { path = "../zng-wgt-style", version = "0.3.28" }
zng-wgt-checkerboard = { path = "../zng-wgt-checkerboard", version = "0.3.28" }
zng-wgt-window = { path = "../zng-wgt-window", version = "0.6.6" }
zng-wgt-layer = { path = "../zng-wgt-layer", version = "0.3.30" }
zng-wgt-undo-history = { path = "../zng-wgt-undo-history", version = "0.3.31" }
zng-wgt-image = { path = "../zng-wgt-image", version = "0.3.31" }
zng-wgt-text = { path = "../zng-wgt-text", version = "0.4.21" }
zng-wgt-text-input = { path = "../zng-wgt-text-input", version = "0.4.21" }
zng-wgt-button = { path = "../zng-wgt-button", version = "0.4.21" }
zng-wgt-stack = { path = "../zng-wgt-stack", version = "0.3.28" }
zng-wgt-panel = { path = "../zng-wgt-panel", version = "0.3.31" }
zng-wgt-grid = { path = "../zng-wgt-grid", version = "0.3.26" }
zng-wgt-wrap = { path = "../zng-wgt-wrap", version = "0.3.31" }
zng-wgt-rule-line = { path = "../zng-wgt-rule-line", version = "0.3.31" }
zng-wgt-toggle = { path = "../zng-wgt-toggle", version = "0.3.31" }
zng-wgt-menu = { path = "../zng-wgt-menu", version = "0.3.31" }
zng-wgt-scroll = { path = "../zng-wgt-scroll", version = "0.4.30" }
zng-wgt-ansi-text = { path = "../zng-wgt-ansi-text", version = "0.3.31" }
zng-wgt-tooltip = { path = "../zng-wgt-tooltip", version = "0.4.21" }
zng-wgt-markdown = { path = "../zng-wgt-markdown", version = "0.3.31" }
zng-wgt-inspector = { path = "../zng-wgt-inspector", version = "0.2.42" }
zng-wgt-settings = { path = "../zng-wgt-settings", version = "0.1.22" }
zng-wgt-dialog = { path = "../zng-wgt-dialog", version = "0.1.17" }
zng-wgt-progress = { path = "../zng-wgt-progress", version = "0.1.1" }

zng-wgt-material-icons = { path = "../zng-wgt-material-icons", version = "0.3.21", default-features = false, optional = true }
zng-ext-single-instance = { path = "../zng-ext-single-instance", version = "0.3.22", optional = true }

tracing = "0.1"

# view
zng-view-api = { path = "../zng-view-api", version = "0.10.4", default-features = false }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
zng-view = { path = "../zng-view", version = "0.6.3", default-features = false, optional = true }

[target.'cfg(not(any(target_arch = "wasm32", target_os = "android", target_os = "ios")))'.dependencies]
zng-view-prebuilt = { path = "../zng-view-prebuilt", version = "0.12.6", optional = true }

[build-dependencies]
cfg_aliases = "0.2"

[package.metadata.docs.rs]
all-features = true

[package.metadata.zng-do]
# this file is generated on build, docs.rs does not give write access to target/doc.
rustdoc-args = [
    "--html-in-header",
    "target/doc/zng-material-icons-extensions.html",
]
