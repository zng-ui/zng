[package]
name = "zng"
version = "0.13.11"
authors = ["The Zng Project Developers"]
edition = "2021"
license = "Apache-2.0 OR MIT"
readme = "README.md"
description = "Cross-platform GUI framework."
documentation = "https://zng-ui.github.io/doc/zng"
repository = "https://github.com/zng-ui/zng"
categories = ["gui"]
keywords = ["gui", "ui", "user-interface", "zng"]

[features]
default = [
    "ipc", 
    "debug_default", 
    "view_software", 
    "crash_handler",
    "crash_handler_debug",
    "window", 
    "third_party", 
    "third_party_default",
    "checkerboard",
    "clipboard",
    "color_filter",
    "config",
    "settings_editor",
    "data_context",
    "data_view",
    "dialog",
    "drag_drop",
    "fs_watcher",
    "grid",
    "image",
    "markdown",
    "menu",
    "progress",
    "rule_line",
    "scroll",
    "slider",
    "toggle",
    "stack",
    "text_input",
    "tooltip",
    "undo",
    "wrap",
    "image_all",
    "button",
    "ansi_text",
]

# Include the default view-process implementation.
#
# Only enables in `not(target_arch = "wasm32")` builds.
view = ["dep:zng-view"]
# Include the default view-process implementation as an embedded precompiled binary.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
view_prebuilt = ["dep:zng-view-prebuilt", "ipc"]

# Enables HTTP tasks and web features of widgets and services.
http = [
    "zng-task/http",
    "zng-wgt/http",
    "zng-ext-image/http",
    "zng-ext-window/http",
]

# Enable the `"dyn_*"`, `"inspector"` features in debug builds.
debug_default = [
    "zng-app/debug_default",
    "zng-wgt-inspector/debug_default",
    "zng-wgt-scroll/debug_default",
    "zng-wgt-window/debug_default",
]

# Enable SVG image rendering, SBG emoji support.
svg = ["zng-ext-svg", "zng-ext-font/svg"]

# Use more dynamic dispatch at the node level by enabling `UiNode::cfg_boxed` to box.
#
# This speeds-up compilation time at the cost of runtime.
dyn_node = ["zng-app/dyn_node"]

# Instrument each property and widget instance with "Inspector" nodes and
# extend windows to be inspected on Ctrl+Shift+I.
inspector = ["zng-wgt-inspector", "zng-app/inspector", "zng-wgt-inspector/live"]

# Enable hot reload builds.
#
# Note that you must configure the target library to hot reload, see `zng::hot_reload` for details.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
hot_reload = ["dep:zng-ext-hot-reload"]

# Use dynamic dispatch at the app-extension level.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = ["zng-app/dyn_app_extension"]

# Box closures at opportune places, such as `Var::map`, reducing the number of monomorphised types.
#
# This speeds-up compilation time at the cost of runtime.
dyn_closure = [
    "zng-wgt/dyn_closure",
    "zng-wgt-scroll/dyn_closure",
    "zng-wgt-window/dyn_closure",
]

# Test utilities.
test_util = [
    "zng-app/test_util",
    "zng-ext-window/test_util",
    "zng-task/test_util",
]

# Allows multiple app instances per-process.
#
# This feature allows multiple apps, one app per thread at a time. The `LocalContext` tracks
# what app is currently running in each thread and `app_local!` statics switch to the value of each app
# depending on the current thread.
#
# Not enabled by default, but enabled by `feature="test_util"`.
multi_app = ["zng-app/multi_app"]

# Enables single app-process instance mode.
#
# Builds with this feature only allow one app-process, subsequent attempts to spawn the app redirect to
# the running app-process.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android", target_os = "ios"))` builds.
single_instance = ["dep:zng-ext-single-instance"]

# Allow app-process crash handler.
#
# Builds with this feature spawn a crash monitor-process for each app-process.
#
# Only enables in `not(any(target_arch = "wasm32", target_os = "android"))` builds.
crash_handler = ["zng-app/crash_handler"]

# Enable debug crash handler view.
crash_handler_debug = ["zng-wgt-inspector/crash_handler", "window"]

# Instrument every widget outer-most node to trace UI methods.
trace_widget = ["zng-app/trace_widget", "zng-wgt-style/trace_widget"]

# Instrument every property and intrinsic node to trace UI methods.
#
# Note that this can cause very large trace files and bad performance.
trace_wgt_item = ["zng-app/trace_wgt_item"]

# Spawns a thread on app creation that checks and prints `parking_lot` deadlocks.
deadlock_detection = ["zng-app/deadlock_detection"]

# Embed hyphenation dictionaries for all supported languages.
#
# If enabled some 2.8MB of data is embedded, you can provide an alternative dictionary source using the 
# `HYPHENATION::init_data_source` method.
hyphenation_embed_all = ["zng-ext-font/hyphenation_embed_all"]

# Include all Material Icons icon sets in the default app.
material_icons = [
    "material_icons_outlined",
    "material_icons_filled",
    "material_icons_rounded",
    "material_icons_sharp",
]
# Material Icons Outlined icon set.
#
# If enabled some icons of this set are used for some of the commands.
material_icons_outlined = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/outlined",
]

# Material Icons Filled icon set.
material_icons_filled = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/filled",
]

# Material Icons Rounded icon set.
material_icons_rounded = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/rounded",
]

# Material Icons Sharp icon set.
material_icons_sharp = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/sharp",
]

# Enable TOML configs.
toml = ["zng-ext-config/toml"]
# Enable RON configs.
ron = ["zng-ext-config/ron"]
# Enable YAML configs.
yaml = ["zng-ext-config/yaml"]

# Enables software renderer fallback in the default view-process.
#
# If enabled and a native OpenGL 3.2 driver is not available the `swgl` software renderer is used.
view_software = ["zng-view?/software"]
# Collects and bundles third-party licenses used by the `zng-view` crate.
#
# Needs `cargo-about` and Internet connection during build.
#
# Not enabled by default. Note that `"view_prebuilt"` always bundles licenses.
view_bundle_licenses = ["zng-view?/bundle_licenses"]

# Enables IPC tasks, pre-build views and connecting to views running in another process.
#
# Only enables in `not(any(target_os = "android", target_arch = "wasm32", target_os = "ios"))` builds.
ipc = ["zng-app/ipc", "zng-view-api/ipc", "zng-view?/ipc", "zng-task/ipc"]

# Check if `zng::env::res` path is available in `init_built_res` first.
#
# Enabled by default in debug builds, ignored in Android and Wasm.
built_res = ["zng-env/built_res"]

# Standard Android backend that requires a build system that can compile Java or Kotlin and fetch Android dependencies.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details.
android_game_activity = ["zng-view?/android_game_activity"]

# Basic Android backend that does not require Java.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details. 
android_native_activity = ["zng-view?/android_native_activity"]

# Enable window, monitor services, widgets and properties.
window = ["dep:zng-ext-window", "dep:zng-wgt-window"]

# Enable third-party license service and types.
third_party = []

# Enable default third-party licenses default view.
third_party_default = ["window", "scroll", "text_input", "data_view", "markdown", "stack", "toggle"]

# Enable ANSI text widget.
#
# Not enabled by default.
ansi_text = ["dep:zng-wgt-ansi-text"]

# Enable checkerboard widget.
checkerboard = ["dep:zng-wgt-checkerboard"]

# Enable clipboard service.
clipboard = ["dep:zng-ext-clipboard"]

# Enable color filter properties.
color_filter = ["dep:zng-wgt-filter"]

# Enable file system watcher service.
fs_watcher = ["dep:zng-ext-fs-watcher"]

# Enable the configuration service.
config = ["dep:zng-ext-config"]

# Enable settings widgets.
settings_editor = ["dep:zng-wgt-settings"]

# Enable data context service and properties.
data_context = ["dep:zng-wgt-data"]

# Enable data view widget.
data_view = ["dep:zng-wgt-data-view"]

# Enable modal dialog overlay widget and service.
dialog = ["dep:zng-wgt-dialog"]

# Enable drag&drop.
drag_drop = ["zng-ext-input/drag_drop", "zng-wgt-input/drag_drop"]

# Enable grid widget.
grid = ["dep:zng-wgt-grid"]

# Enable image service and widget.
image = ["dep:zng-ext-image", "dep:zng-wgt-image"]

# Enable markdown widget.
markdown = ["dep:zng-wgt-markdown"]

# Enable menu widgets.
menu = ["dep:zng-wgt-menu"]

# Enable progress indicator widgets.
progress = ["dep:zng-wgt-progress"]

# Enable rule line widgets.
rule_line = ["dep:zng-wgt-rule-line"]

# Enable scroll widget.
scroll = ["dep:zng-wgt-scroll"]

# Enable button widget.
button = ["dep:zng-wgt-button"]

# Enable toggle widgets.
toggle = ["dep:zng-wgt-toggle"]

# Enable slider widget.
slider = ["dep:zng-wgt-slider"]

# Enable stack widget.
stack = ["dep:zng-wgt-stack"]

# Enable text input widgets.
text_input = ["dep:zng-wgt-text-input"]

# Enable tooltip widget.
tooltip = ["dep:zng-wgt-tooltip", "zng-wgt-button?/tooltip"]

# Enable undo/redo service.
undo = ["dep:zng-ext-undo", "dep:zng-wgt-undo-history", "dep:zng-wgt-undo"]

# Enable wrap widget.
wrap = ["dep:zng-wgt-wrap"]

# Enable BMP image decoder and encoder with "view" feature.
image_bmp = ["zng-view?/image_bmp"]
# Enable DDS image decoder with "view" feature.
image_dds = ["zng-view?/image_dds"]
# Enable EXR image decoder and encoder with "view" feature.
image_exr = ["zng-view?/image_exr"]
# Enable Farbfeld image decoder and encoder with "view" feature.
image_ff = ["zng-view?/image_ff"]
# Enable GIF image decoder and encoder with "view" feature.
image_gif = ["zng-view?/image_gif"]
# Enable Radiance HDR image decoder and encoder with "view" feature.
image_hdr = ["zng-view?/image_hdr"]
# Enable ICO image decoder and encoder with "view" feature.
image_ico = ["zng-view?/image_ico"]
# Enable JPEG image decoder and encoder with "view" feature.
image_jpeg = ["zng-view?/image_jpeg"]
# Enable PNG image decoder and encoder with "view" feature.
image_png = ["zng-view?/image_png"]
# Enable PNM image decoder and encoder with "view" feature.
image_pnm = ["zng-view?/image_pnm"]
# Enable QOI image decoder and encoder with "view" feature.
image_qoi = ["zng-view?/image_qoi"]
# Enable TGA image decoder and encoder with "view" feature.
image_tga = ["zng-view?/image_tga"]
# Enable TIFF image decoder and encoder with "view" feature.
image_tiff = ["zng-view?/image_tiff"]
# Enable WEBP image decoder with "view" feature.
image_webp = ["zng-view?/image_webp"]

# Enable all encoders and decoders.
image_all = ["zng-view?/image_all"]

[dependencies]
# foundation
zng-clone-move = { path = "../zng-clone-move", version = "0.2.5" }
zng-txt = { path = "../zng-txt", version = "0.2.8" }
zng-state-map = { path = "../zng-state-map", version = "0.3.8" }
zng-app-context = { path = "../zng-app-context", version = "0.5.13" }
zng-layout = { path = "../zng-layout", version = "0.2.36" }
zng-var = { path = "../zng-var", version = "0.5.15" }
zng-task = { path = "../zng-task", version = "0.4.17" }
zng-color = { path = "../zng-color", version = "0.4.5" }
zng-env = { path = "../zng-env", version = "0.3.8" }
zng-unique-id = { path = "../zng-unique-id", version = "0.4.8" }

# app
zng-app = { path = "../zng-app", version = "0.14.8", default-features = false }
zng-ext-fs-watcher = { path = "../zng-ext-fs-watcher", version = "0.3.8", optional = true }
zng-ext-config = { path = "../zng-ext-config", version = "0.4.8", default-features = false, optional = true }
zng-ext-font = { path = "../zng-ext-font", version = "0.5.10" }
zng-ext-l10n = { path = "../zng-ext-l10n", version = "0.6.8", features = ["tar"] }
zng-ext-image = { path = "../zng-ext-image", version = "0.3.8", optional = true }
zng-ext-svg = { path = "../zng-ext-svg", version = "0.2.8", optional = true }
zng-ext-clipboard = { path = "../zng-ext-clipboard", version = "0.3.8", optional = true }
zng-ext-window = { path = "../zng-ext-window", version = "0.4.8", optional = true }
zng-ext-input = { path = "../zng-ext-input", version = "0.6.8" }
zng-ext-undo = { path = "../zng-ext-undo", version = "0.3.8", optional = true }
zng-ext-hot-reload = { path = "../zng-ext-hot-reload", version = "0.2.8", optional = true }

# widgets
zng-wgt = { path = "../zng-wgt", version = "0.6.8" }
zng-wgt-access = { path = "../zng-wgt-access", version = "0.3.8" }
zng-wgt-transform = { path = "../zng-wgt-transform", version = "0.3.8" }
zng-wgt-input = { path = "../zng-wgt-input", version = "0.3.8" }
zng-wgt-data = { path = "../zng-wgt-data", version = "0.3.8", optional = true }
zng-wgt-filter = { path = "../zng-wgt-filter", version = "0.3.8", optional = true }
zng-wgt-size-offset = { path = "../zng-wgt-size-offset", version = "0.3.8" }
zng-wgt-container = { path = "../zng-wgt-container", version = "0.5.8" }
zng-wgt-undo = { path = "../zng-wgt-undo", version = "0.3.8", optional = true }
zng-wgt-data-view = { path = "../zng-wgt-data-view", version = "0.4.8", optional = true }
zng-wgt-fill = { path = "../zng-wgt-fill", version = "0.3.8" }
zng-wgt-style = { path = "../zng-wgt-style", version = "0.4.8" }
zng-wgt-checkerboard = { path = "../zng-wgt-checkerboard", version = "0.4.8", optional = true }
zng-wgt-window = { path = "../zng-wgt-window", version = "0.7.11", optional = true }
zng-wgt-layer = { path = "../zng-wgt-layer", version = "0.4.8" }
zng-wgt-undo-history = { path = "../zng-wgt-undo-history", version = "0.4.11", optional = true }
zng-wgt-image = { path = "../zng-wgt-image", version = "0.4.11", optional = true }
zng-wgt-text = { path = "../zng-wgt-text", version = "0.5.11" }
zng-wgt-text-input = { path = "../zng-wgt-text-input", version = "0.5.11", optional = true }
zng-wgt-button = { path = "../zng-wgt-button", version = "0.5.11", default-features = false, optional = true }
zng-wgt-stack = { path = "../zng-wgt-stack", version = "0.4.8", optional = true }
zng-wgt-panel = { path = "../zng-wgt-panel", version = "0.4.11" }
zng-wgt-grid = { path = "../zng-wgt-grid", version = "0.4.8", optional = true }
zng-wgt-wrap = { path = "../zng-wgt-wrap", version = "0.4.11", optional = true }
zng-wgt-rule-line = { path = "../zng-wgt-rule-line", version = "0.4.11", optional = true }
zng-wgt-toggle = { path = "../zng-wgt-toggle", version = "0.4.11", optional = true }
zng-wgt-menu = { path = "../zng-wgt-menu", version = "0.4.11", optional = true }
zng-wgt-scroll = { path = "../zng-wgt-scroll", version = "0.5.9", optional = true }
zng-wgt-ansi-text = { path = "../zng-wgt-ansi-text", version = "0.4.11", optional = true }
zng-wgt-tooltip = { path = "../zng-wgt-tooltip", version = "0.5.11", optional = true }
zng-wgt-markdown = { path = "../zng-wgt-markdown", version = "0.4.11", optional = true }
zng-wgt-inspector = { path = "../zng-wgt-inspector", version = "0.3.11", optional = true }
zng-wgt-settings = { path = "../zng-wgt-settings", version = "0.2.11", optional = true }
zng-wgt-dialog = { path = "../zng-wgt-dialog", version = "0.2.11", optional = true }
zng-wgt-progress = { path = "../zng-wgt-progress", version = "0.2.11", optional = true }
zng-wgt-slider = { path = "../zng-wgt-slider", version = "0.2.8", optional = true }

zng-wgt-material-icons = { path = "../zng-wgt-material-icons", version = "0.4.11", default-features = false, optional = true }
zng-ext-single-instance = { path = "../zng-ext-single-instance", version = "0.4.8", optional = true }

tracing = "0.1"

# view
zng-view-api = { path = "../zng-view-api", version = "0.11.5", default-features = false, features = ["var"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
zng-view = { path = "../zng-view", version = "0.7.5", default-features = false, optional = true }

[target.'cfg(not(any(target_arch = "wasm32", target_os = "android", target_os = "ios")))'.dependencies]
zng-view-prebuilt = { path = "../zng-view-prebuilt", version = "0.13.11", optional = true }

[build-dependencies]
cfg_aliases = "0.2"

[package.metadata.docs.rs]
all-features = true

[package.metadata.zng-do]
# this file is generated on build, docs.rs does not give write access to target/doc.
rustdoc-args = [
    "--html-in-header",
    "target/doc/zng-material-icons-extensions.html",
]
