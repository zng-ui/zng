[package]
name = "zng-view"
version = "0.12.2"
authors = ["The Zng Project Developers"]
edition = "2024"
license = "Apache-2.0 OR MIT"
readme = "README.md"
description = "Part of the zng project."
documentation = "https://zng-ui.github.io/doc/zng_view"
repository = "https://github.com/zng-ui/zng"
categories = ["gui"]
keywords = ["gui", "ui", "user-interface", "zng"]

[features]
# Enables pre-build and init as view-process.
#
# If this is enabled all communication with the view is serialized/deserialized, 
# even in same-process mode.
#
# Only enables in `cfg(not(target_os = "android"))` builds.
ipc = ["zng-view-api/ipc"]

# Enables software renderer fallback.
#
# If enabled and a native OpenGL 3.2 driver is not available the `swgl` software renderer is used.
software = ["dep:swgl", "dep:softbuffer"]

# Bundle third party licenses.
#
# Needs `cargo-about` and Internet connection during build.
#
# Not enabled by default. Note that `"view_prebuilt"` always bundles licenses.
bundle_licenses = ["zng-tp-licenses/bundle"]

# Standard Android backend that requires a build system that can compile Java or Kotlin and fetch Android dependencies.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details.
android_game_activity = ["winit/android-game-activity"]

# Basic Android backend that does not require Java.
#
# See `https://docs.rs/winit/latest/winit/platform/android/` for more details. 
android_native_activity = ["winit/android-native-activity"]

# Enable AVIF image decoder and encoder.
#
# Note that this enables the `dav1d` dependency that is not trivial to build.
#
# Removed for now because there is no way to exclude this feature from test runs that use --all-features
#
# Also see `docs/avif-setup.md` for a guide on how to depend on zng-view with avif.
# image_avif = ["image/avif", "image/avif-native"]

# Enable BMP image decoder and encoder.
image_bmp = ["image/bmp"]
# Enable DDS image decoder.
image_dds = ["image/dds"]
# Enable EXR image decoder and encoder.
image_exr = ["image/exr"]
# Enable Farbfeld image decoder and encoder.
image_ff = ["image/ff"]
# Enable GIF image decoder and encoder.
image_gif = ["image/gif"]
# Enable Radiance HDR image decoder and encoder.
image_hdr = ["image/hdr"]
# Enable ICO image decoder and encoder.
image_ico = ["image/ico"]
# Enable JPEG image decoder and encoder.
image_jpeg = ["image/jpeg"]
# Enable PNG image decoder and encoder.
image_png = ["image/png"]
# Enable PNM image decoder and encoder.
image_pnm = ["image/pnm"]
# Enable QOI image decoder and encoder.
image_qoi = ["image/qoi"]
# Enable TGA image decoder and encoder.
image_tga = ["image/tga"]
# Enable TIFF image decoder and encoder.
image_tiff = ["image/tiff"]
# Enable WEBP image decoder.
image_webp = ["image/webp"]

# Enable all image decoders and encoders.
image_all = [
    "image_bmp",
    "image_dds",
    "image_exr",
    "image_ff",
    "image_gif",
    "image_hdr",
    "image_ico",
    "image_jpeg",
    "image_png",
    "image_pnm",
    "image_qoi",
    "image_tga",
    "image_tiff",
    "image_webp",
]

[lib]
crate-type = ["lib", "cdylib"]

[dependencies]
# path = "../../../zng-webrender/webrender" for testing webrender updates
webrender = { package = "zng-webrender", version = "0.65.0" }
# path = "../../../zng-webrender/swgl" 
swgl = { package = "zng-swgl", version = "0.4.0", optional = true }

zng-view-api = { path = "../zng-view-api", version = "0.15.2", default-features = false }
zng-unit = { path = "../zng-unit", version = "0.4.3", default-features = false }
zng-txt = { path = "../zng-txt", version = "0.4.2", default-features = false }
zng-tp-licenses = { path = "../zng-tp-licenses", version = "0.5.2", default-features = false }
zng-env = { path = "../zng-env", version = "0.7.1", default-features = false }

# `view_process_extension!` uses pre-expanded code generated by linkme macro that must match link_section name.
linkme = { version =  "=0.3.33", default-features = false }

tracing = { version = "0.1", default-features = false }
gleam = { version = "0.15.1", default-features = false } # matches webrender
winit = { version = "0.30", default-features = false, features = [
    "x11",
    "wayland",
    "wayland-dlopen",
    "rwh_06",
] }
glutin = { version = "0.32", default-features = false, features = ["egl", "glx", "wayland", "wgl", "x11" ] }
raw-window-handle = { version = "0.6", default-features = false } # matches glutin
flume = { version = "0.11", default-features = false }
image = { version = "0.25", default-features = false, features = ["rayon"] } # on upgrade review audit.toml
img-parts = { version = "0.4", default-features = false, features = ["std"] }
byteorder = { version = "1.5", default-features = false }
rustc-hash = { version = "2.0", default-features = false }
rayon = { version = "1.10", default-features = false }
serde = { version = "1.0", default-features = false }
accesskit = { version = "0.21", default-features = false }
accesskit_winit = { version = "0.29", default-features = false, features = ["rwh_06", "accesskit_unix", "async-io"] }
# rfd
## cfg(not(linux, android, ios))
[target.'cfg(not(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd", target_os = "netbsd", target_os = "openbsd", target_os = "android", target_os = "ios")))'.dependencies.rfd]
version = "0.15"
default-features = false
## cfg(linux)
[target.'cfg(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd", target_os = "netbsd", target_os = "openbsd"))'.dependencies.rfd]
version = "0.15"
default-features = false
features = ["xdg-portal", "async-std"]

[target.'cfg(windows)'.dependencies.windows-sys]
version = "0.52.0" # matches winit, glutin, other crates
default-features = false
features = [
    "Win32_UI_Shell",    
    "Win32_System_Com",
    "Win32_UI_WindowsAndMessaging",
    "Win32_Devices_HumanInterfaceDevice",
    "Win32_UI_Input_KeyboardAndMouse",
    "Win32_Graphics_Gdi",
    "Win32_Graphics_OpenGL",
    "Win32_UI_Accessibility",
    "Win32_System_LibraryLoader",
    "Win32_Globalization",
    "Win32_System_SystemServices",
    "Win32_System_Power",
    "Win32_System_Shutdown",
]
[target.'cfg(windows)'.dependencies.windows]
version = "0.58.0"
default-features = false
features = [
    "std",
    "Foundation_Collections", 
    "System_UserProfile",
    "UI_ViewManagement", 
    "Win32_UI", 
    "Win32_UI_WindowsAndMessaging", 
    "Win32_UI_Input",
    "Win32_Devices_DeviceAndDriverInstallation",
    "Win32_Devices_HumanInterfaceDevice",
    "Win32_System",
    "Win32_System_Memory",
]

[target.'cfg(windows)'.dependencies]
clipboard-win = { version = "5.0", default-features = false, features = ["std"] }

[target.'cfg(not(any(windows, target_os = "android")))'.dependencies]
arboard = "3.6"
[target.'cfg(not(windows))'.dependencies]
sys-locale = "0.3"

[target.'cfg(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd", target_os = "netbsd", target_os = "openbsd"))'.dependencies]
wayland-client = { version = "0.31", default-features = false } # matches winit
x11-dl = { version = "2.18.5", default-features = false}       # matches winit
tempfile = { version = "3.10", default-features = false, features = ["getrandom"] }
# xlib is re-exported by glutin/winit

[target.'cfg(target_os = "macos")'.dependencies.objc2-app-kit]
version = "0.2.2"
default-features = false
features = ["std", "NSEvent", "NSAppearance", "NSColor", "NSColorSpace"]
[target.'cfg(target_os = "macos")'.dependencies.objc2-foundation]
version = "0.2.2"
default-features = false
features = ["std", "NSString"]

[target.'cfg(target_os = "macos")'.dependencies.libc]
default-features = false
version = "0.2"
features = ["std"]

[target.'cfg(target_os = "android")'.dependencies]
parking_lot = { version = "0.12", default-features = false }
# matches winit -> android-activity
ndk = { version = "0.9.0", default-features = false }
ndk-context = { version = "0.1.1", default-features = false }
jni = { version = "0.21", default-features = false }

[target.'cfg(not(target_os = "android"))'.dependencies]
softbuffer = { version = "0.4", default-features = false, features = ["kms", "wayland", "wayland-dlopen", "x11", "x11-dlopen"], optional = true }

[build-dependencies]
zng-tp-licenses = { path = "../zng-tp-licenses", version = "0.5.2", default-features = false, features = [
    "build",
] }
cfg_aliases = { version = "0.2", default-features = false }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(feature, values("image_avif"))',
    'cfg(zng_view_image_has_avif)',
] }

[package.metadata.docs.rs]
all-features = true
targets = [
    "x86_64-unknown-linux-gnu",
    "x86_64-pc-windows-msvc",
    "x86_64-apple-darwin",
]

# prebuild profile defined in the workspace toml
